# generated by gen_client.py:
#   filename:  api.py:
#   timestamp: 2025-06-04T18:14:57.218456

from typing import Any, Optional

from s2gos.common.models import (
    ConfClasses,
    Execute,
    JobList,
    LandingPage,
    Process,
    ProcessList,
    Results,
    StatusInfo,
)
from .service import Service


def get_landing_page(_service: Optional[Service] = None) -> LandingPage:
    """
    The landing page provides links to the:
      * The APIDefinition (no fixed path),
      * The Conformance statements (path /conformance),
      * The processes metadata (path /processes),
      * The endpoint for job monitoring (path /jobs).

    For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).
    """
    return (_service or Service.default()).call(
        path="/", method="get", params={}, request=None, return_type=LandingPage
    )


def get_conformance_classes(_service: Optional[Service] = None) -> ConfClasses:
    """
    A list of all conformance classes, specified in a standard, that the server conforms to.

    | Conformance class | URI |
    |-----------|-------|
    |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core|
    |OGC Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
    |JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
    |HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html|
    |OpenAPI Specification 3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30|
    |Job list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
    |Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
    |Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|

    For more information, see [Section 7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).

    """
    return (_service or Service.default()).call(
        path="/conformance",
        method="get",
        params={},
        request=None,
        return_type=ConfClasses,
    )


def get_processes(_service: Optional[Service] = None) -> ProcessList:
    """
    The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.

    For more information, see [Section 7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).

    """
    return (_service or Service.default()).call(
        path="/processes",
        method="get",
        params={},
        request=None,
        return_type=ProcessList,
    )


def get_process_description(
    process_id: str, _service: Optional[Service] = None
) -> Process:
    """
    The process description contains information about inputs and outputs and a link to the execution-endpoint for the process. The Core does not mandate the use of a specific process description to specify the interface of a process. That said, the Core requirements class makes the following recommendation:

    Implementations SHOULD consider supporting the OGC process description.

    For more information, see [Section 7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).

    Params:
      process_id:
    """
    return (_service or Service.default()).call(
        path="/processes/{processID}",
        method="get",
        params={"processID": process_id},
        request=None,
        return_type=Process,
    )


def get_jobs(_service: Optional[Service] = None) -> JobList:
    """
    Lists available jobs.

    For more information, see [Section 11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).

    """
    return (_service or Service.default()).call(
        path="/jobs", method="get", params={}, request=None, return_type=JobList
    )


def execute(
    process_id: str, request: Execute, _service: Optional[Service] = None
) -> Any:
    """
    Create a new job.

    For more information, see [Section 7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).

    Params:
      process_id:
      request: Mandatory execute request JSON
    """
    return (_service or Service.default()).call(
        path="/processes/{processID}/execution",
        method="post",
        params={"processID": process_id},
        request=request,
        return_type=Any,
    )


def get_status(job_id: str, _service: Optional[Service] = None) -> StatusInfo:
    """
    Shows the status of a job.

     For more information, see [Section 7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).

    Params:
      job_id: local identifier of a job
    """
    return (_service or Service.default()).call(
        path="/jobs/{jobId}",
        method="get",
        params={"jobId": job_id},
        request=None,
        return_type=StatusInfo,
    )


def dismiss(job_id: str, _service: Optional[Service] = None) -> StatusInfo:
    """
    Cancel a job execution and remove it from the jobs list.

    For more information, see [Section 13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).

    Params:
      job_id: local identifier of a job
    """
    return (_service or Service.default()).call(
        path="/jobs/{jobId}",
        method="delete",
        params={"jobId": job_id},
        request=None,
        return_type=StatusInfo,
    )


def get_result(job_id: str, _service: Optional[Service] = None) -> Results:
    """
    Lists available results of a job. In case of a failure, lists exceptions instead.

    For more information, see [Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).

    Params:
      job_id: local identifier of a job
    """
    return (_service or Service.default()).call(
        path="/jobs/{jobId}/results",
        method="get",
        params={"jobId": job_id},
        request=None,
        return_type=Results,
    )
