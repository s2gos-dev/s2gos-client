# generated by gen_client.py:
#   filename:  client.py:
#   timestamp: 2025-06-05T18:38:56.778715

from typing import Optional

from s2gos.common.models import (
    ConfClasses,
    Exception,
    Execute,
    JobList,
    LandingPage,
    Process,
    ProcessList,
    Results,
    StatusInfo,
)
from .service import DefaultService, Service


class Client:
    """
    The S2GOS Client API.

    Args:
      service: Optional API service instance.
      kwargs: Configuration passed to `DefaultService` constructor.
        if `service` is not provided.
    """

    def __init__(self, *, service: Optional[Service] = None, **kwargs):
        self._service = DefaultService(**kwargs) if service is None else service

    def get_landing_page(self) -> LandingPage:
        """
        The landing page provides links to the:
          * The APIDefinition (no fixed path),
          * The Conformance statements (path /conformance),
          * The processes metadata (path /processes),
          * The endpoint for job monitoring (path /jobs).

        For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).

        Returns:
          LandingPage: The landing page provides links to the API definition
            (link relations `service-desc` and `service-doc`),
            the Conformance declaration (path `/conformance`,
            link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`), and to other resources.

        Raises:
          Exception: A server error occurred.
        """
        return self._service.call(
            path="/",
            method="get",
            params={},
            request=None,
            return_types={"200": LandingPage},
            error_types={"500": Exception},
        )

    def get_conformance_classes(self) -> ConfClasses:
        """
        A list of all conformance classes, specified in a standard, that the server conforms to.

        | Conformance class | URI |
        |-----------|-------|
        |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core|
        |OGC Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
        |JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
        |HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html|
        |OpenAPI Specification 3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30|
        |Job list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
        |Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
        |Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|

        For more information, see [Section 7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).


        Returns:
          ConfClasses: The URIs of all conformance classes supported by the server.

            To support "generic" clients that want to access multiple
            OGC API - Processes implementations - and not "just" a specific
            API / server, the server declares the conformance
            classes it implements and conforms to.

        Raises:
          Exception: A server error occurred.
        """
        return self._service.call(
            path="/conformance",
            method="get",
            params={},
            request=None,
            return_types={"200": ConfClasses},
            error_types={"500": Exception},
        )

    def get_processes(self) -> ProcessList:
        """
        The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.

        For more information, see [Section 7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).


        Returns:
          ProcessList: Information about the available processes
        """
        return self._service.call(
            path="/processes",
            method="get",
            params={},
            request=None,
            return_types={"200": ProcessList},
            error_types={},
        )

    def get_process_description(self, process_id: str) -> Process:
        """
        The process description contains information about inputs and outputs and a link to the execution-endpoint for the process. The Core does not mandate the use of a specific process description to specify the interface of a process. That said, the Core requirements class makes the following recommendation:

        Implementations SHOULD consider supporting the OGC process description.

        For more information, see [Section 7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).

        Params:
          process_id:

        Returns:
          Process: A process description.

        Raises:
          Exception: The requested URI was not found.
        """
        return self._service.call(
            path="/processes/{processID}",
            method="get",
            params={"processID": process_id},
            request=None,
            return_types={"200": Process},
            error_types={"404": Exception},
        )

    def get_jobs(self) -> JobList:
        """
        Lists available jobs.

        For more information, see [Section 11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).


        Returns:
          JobList: A list of jobs for this process.

        Raises:
          Exception: The requested URI was not found.
        """
        return self._service.call(
            path="/jobs",
            method="get",
            params={},
            request=None,
            return_types={"200": JobList},
            error_types={"404": Exception},
        )

    def execute(self, process_id: str, request: Execute) -> StatusInfo:
        """
        Create a new job.

        For more information, see [Section 7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).

        Params:
          process_id:
          request: Mandatory execute request JSON

        Returns:
          StatusInfo: Started asynchronous execution. Created job.

        Raises:
          Exception: The requested URI was not found.
          Exception: A server error occurred.
        """
        return self._service.call(
            path="/processes/{processID}/execution",
            method="post",
            params={"processID": process_id},
            request=request,
            return_types={"201": StatusInfo},
            error_types={"404": Exception, "500": Exception},
        )

    def get_status(self, job_id: str) -> StatusInfo:
        """
        Shows the status of a job.

         For more information, see [Section 7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).

        Params:
          job_id: local identifier of a job

        Returns:
          StatusInfo: The status of a job.

        Raises:
          Exception: The requested URI was not found.
          Exception: A server error occurred.
        """
        return self._service.call(
            path="/jobs/{jobId}",
            method="get",
            params={"jobId": job_id},
            request=None,
            return_types={"200": StatusInfo},
            error_types={"404": Exception, "500": Exception},
        )

    def dismiss(self, job_id: str) -> StatusInfo:
        """
        Cancel a job execution and remove it from the jobs list.

        For more information, see [Section 13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).

        Params:
          job_id: local identifier of a job

        Returns:
          StatusInfo: The status of a job.

        Raises:
          Exception: The requested URI was not found.
          Exception: A server error occurred.
        """
        return self._service.call(
            path="/jobs/{jobId}",
            method="delete",
            params={"jobId": job_id},
            request=None,
            return_types={"200": StatusInfo},
            error_types={"404": Exception, "500": Exception},
        )

    def get_result(self, job_id: str) -> Results:
        """
        Lists available results of a job. In case of a failure, lists exceptions instead.

        For more information, see [Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).

        Params:
          job_id: local identifier of a job

        Returns:
          Results: The results of a job.

        Raises:
          Exception: The requested URI was not found.
          Exception: A server error occurred.
        """
        return self._service.call(
            path="/jobs/{jobId}/results",
            method="get",
            params={"jobId": job_id},
            request=None,
            return_types={"200": Results},
            error_types={"404": Exception, "500": Exception},
        )
