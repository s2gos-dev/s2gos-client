# generated by gen_client.py:
#   filename:  client.py:
#   timestamp: 2025-06-23T18:37:02.628191


from typing import Optional

from s2gos.common.models import (
    ApiError,
    Capabilities,
    ConformanceDeclaration,
    JobInfo,
    JobList,
    JobResults,
    ProcessDescription,
    ProcessList,
    ProcessRequest,
)

from .config import ClientConfig
from .defaults import DEFAULT_SERVER_URL
from .transport import DefaultTransport, Transport


class Client:
    """
    The S2GOS Client API.

    Args:
      config_path: Optional path of the configuration file to be loaded
      server_url: Optional server URL
      user_name: Optional username
      user_name: Optional user access token
      debug: Whether to output debug logs
      _transport: Optional web API transport (for testing only).
    """

    def __init__(
        self,
        *,
        config_path: Optional[str] = None,
        server_url: Optional[str] = None,
        user_name: Optional[str] = None,
        access_token: Optional[str] = None,
        debug: bool = False,
        _transport: Optional[Transport] = None,
    ):
        default_config = ClientConfig.read(config_path=config_path)
        config = ClientConfig(
            user_name=user_name or default_config.user_name,
            access_token=access_token or default_config.access_token,
            server_url=server_url or default_config.server_url or DEFAULT_SERVER_URL,
        )
        self._config = config
        self._transport = (
            DefaultTransport(server_url=config.server_url, debug=debug)
            if _transport is None
            else _transport
        )

    @property
    def config(self) -> ClientConfig:
        return self._config

    def _repr_json_(self):
        # noinspection PyProtectedMember
        return self._config._repr_json_()

    def get_capabilities(self) -> Capabilities:
        """
        The landing page provides links to the:
          * The APIDefinition (no fixed path),
          * The Conformance statements (path /conformance),
          * The processes metadata (path /processes),
          * The endpoint for job monitoring (path /jobs).

        For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).

        Returns:
          Capabilities: The landing page provides links to the API definition
            (link relations `service-desc` and `service-doc`),
            the Conformance declaration (path `/conformance`,
            link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`), and to other resources.

        Raises:
          ApiError: A server error occurred.
        """
        return self._transport.call(
            path="/",
            method="get",
            path_params={},
            query_params={},
            request=None,
            return_types={"200": Capabilities},
            error_types={"500": ApiError},
        )

    def get_conformance(self) -> ConformanceDeclaration:
        """
        A list of all conformance classes, specified in a standard, that the server conforms to.

        | Conformance class | URI |
        |-----------|-------|
        |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core|
        |OGC Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
        |JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
        |HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html|
        |OpenAPI Specification 3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30|
        |Job list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
        |Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
        |Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|

        For more information, see [Section 7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).


        Returns:
          ConformanceDeclaration: The URIs of all conformance classes supported by the server.

            To support "generic" clients that want to access multiple
            OGC API - Processes implementations - and not "just" a specific
            API / server, the server declares the conformance
            classes it implements and conforms to.

        Raises:
          ApiError: A server error occurred.
        """
        return self._transport.call(
            path="/conformance",
            method="get",
            path_params={},
            query_params={},
            request=None,
            return_types={"200": ConformanceDeclaration},
            error_types={"500": ApiError},
        )

    def get_processes(self) -> ProcessList:
        """
        The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.

        For more information, see [Section 7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).


        Returns:
          ProcessList: Information about the available processes
        """
        return self._transport.call(
            path="/processes",
            method="get",
            path_params={},
            query_params={},
            request=None,
            return_types={"200": ProcessList},
            error_types={},
        )

    def get_process(self, process_id: str) -> ProcessDescription:
        """
        The process description contains information about inputs and outputs and a link to the execution-endpoint for the process. The Core does not mandate the use of a specific process description to specify the interface of a process. That said, the Core requirements class makes the following recommendation:

        Implementations SHOULD consider supporting the OGC process description.

        For more information, see [Section 7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).

        Params:
          process_id:

        Returns:
          ProcessDescription: A process description.

        Raises:
          ApiError: The requested URI was not found.
        """
        return self._transport.call(
            path="/processes/{processID}",
            method="get",
            path_params={"processID": process_id},
            query_params={},
            request=None,
            return_types={"200": ProcessDescription},
            error_types={"404": ApiError},
        )

    def execute_process(self, process_id: str, request: ProcessRequest) -> JobInfo:
        """
        Create a new job.

        For more information, see [Section 7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).

        Params:
          process_id:
          request: Mandatory request JSON

        Returns:
          JobInfo: Started asynchronous execution. Created job.

        Raises:
          ApiError: The requested URI was not found.
          ApiError: A server error occurred.
        """
        return self._transport.call(
            path="/processes/{processID}/execution",
            method="post",
            path_params={"processID": process_id},
            query_params={},
            request=request,
            return_types={"201": JobInfo},
            error_types={"404": ApiError, "500": ApiError},
        )

    def get_jobs(self) -> JobList:
        """
        Lists available jobs.

        For more information, see [Section 11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).


        Returns:
          JobList: A list of jobs for this process.

        Raises:
          ApiError: The requested URI was not found.
        """
        return self._transport.call(
            path="/jobs",
            method="get",
            path_params={},
            query_params={},
            request=None,
            return_types={"200": JobList},
            error_types={"404": ApiError},
        )

    def get_job(self, job_id: str) -> JobInfo:
        """
        Shows the status of a job.

        For more information, see [Section 7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).

        Params:
          job_id: local identifier of a job

        Returns:
          JobInfo: The status of a job.

        Raises:
          ApiError: The requested URI was not found.
          ApiError: A server error occurred.
        """
        return self._transport.call(
            path="/jobs/{jobId}",
            method="get",
            path_params={"jobId": job_id},
            query_params={},
            request=None,
            return_types={"200": JobInfo},
            error_types={"404": ApiError, "500": ApiError},
        )

    def dismiss_job(self, job_id: str) -> JobInfo:
        """
        Cancel a job execution and remove it from the jobs list.

        For more information, see [Section 13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).

        Params:
          job_id: local identifier of a job

        Returns:
          JobInfo: Information about the job.

        Raises:
          ApiError: The requested URI was not found.
          ApiError: A server error occurred.
        """
        return self._transport.call(
            path="/jobs/{jobId}",
            method="delete",
            path_params={"jobId": job_id},
            query_params={},
            request=None,
            return_types={"200": JobInfo},
            error_types={"404": ApiError, "500": ApiError},
        )

    def get_job_results(self, job_id: str) -> JobResults:
        """
        Lists available results of a job. In case of a failure, lists errors instead.

        For more information, see [Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).

        Params:
          job_id: local identifier of a job

        Returns:
          JobResults: The results of a job.

        Raises:
          ApiError: The requested URI was not found.
          ApiError: A server error occurred.
        """
        return self._transport.call(
            path="/jobs/{jobId}/results",
            method="get",
            path_params={"jobId": job_id},
            query_params={},
            request=None,
            return_types={"200": JobResults},
            error_types={"404": ApiError, "500": ApiError},
        )
